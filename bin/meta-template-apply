#!/usr/bin/env node

const program = require('commander')
const debug = require('debug')('meta-template-apply')
const co = require('co')
const getFilesFromDir = require('../lib/getFilesFromDir')
const parseFilesForTemplateVariables = require('../lib/parseFilesForTemplateVariables')
// const getUserInputMapFromTemplateVariables = require('../lib/getUserInputMapFromTemplateVariables')

const usage = `\n  usage:\n\n    meta template apply <srcTemplateDir> <destProjectDir>\n`;

if ( ! process.argv[2] || process.argv[2] === '--help')
  return console.log(usage)

const srcTemplateDir = process.argv[2] === 'blank' ?
                      process.argv[3] :
                      process.argv[2]

const destProjectDir = process.argv[3] === 'blank' ?
                      process.argv[4] :
                      process.argv[3]

if ( ! srcTemplateDir || ! destProjectDir) return console.log(usage)

console.log(`meta template applying \'${srcTemplateDir}\' to ${destProjectDir}`)

// First, let's parse each file in the srcTemplateDir, and find all of the 
// template variables

const run = co.wrap(function *() {
  const templateFiles = yield getFilesFromDir(srcTemplateDir);
  const templateVariables = parseFilesForTemplateVariables(templateFiles)

  console.log(templateVariables)

  // const userValues = await getUserInputMapFromTemplateVariables(templateVariables);

  // ncp(path.join(__dirname, '../templates/svc'), dest, {
  //   clobber: false,
  //   rename: function(target) {
  //     Object.keys(userValues).forEach((templateVariable) => {
  //       if (target.indexOf(`{[${templateVariable}]}`) > -1) { 
  //         target = target.replace(`{[${templateVariable}]}`, userValues[templateVariable])
  //       }
  //     })
      
  //     return target;
  //   },
  //   transform: function(read, write, file) {
  //     read
  //       .pipe((readString) => {
  //         return Object.keys(userValues).forEach((templateVariable) => {
  //           readString.replace(`/\{\[${templateVariable}\]\}/g`, userValues[templateVariable])
  //         })
  //       })
  //       .pipe(write);
  //   }
  // })
})

run()